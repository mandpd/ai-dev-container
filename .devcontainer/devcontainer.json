{
  "name": "AI Dev (uv + Jupyter + ts-node)",
  "image": "mcr.microsoft.com/devcontainers/base:ubuntu",
  "features": {
    "ghcr.io/devcontainers/features/python:1": { "version": "3.11" },
    "ghcr.io/devcontainers/features/node:1": { "version": "20" },
    "ghcr.io/devcontainers/features/common-utils:2": { "installZsh": true },
    "ghcr.io/devcontainers/features/git-lfs:1": {}
  },
  "remoteUser": "vscode",
  "containerEnv": {
    "PYTHONDONTWRITEBYTECODE": "1",
    "JUPYTER_ENABLE_LAB": "yes"
  },
  "forwardPorts": [8888],
  "portsAttributes": {
    "8888": { "label": "JupyterLab", "onAutoForward": "notify" }
  },
  "customizations": {
    "vscode": {
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-toolsai.jupyter",
        "ms-toolsai.jupyter-keymap",
        "ms-toolsai.jupyter-renderers"
      ],
      "settings": {
        "python.terminal.activateEnvironment": true,
        "jupyter.jupyterServerType": "local"
      }
    }
  },

  "postCreateCommand": [
    // --- install uv ---
    "bash -lc 'curl -LsSf https://astral.sh/uv/install.sh | sh && echo \"export PATH=\\\"$HOME/.local/bin:$PATH\\\"\" >> ~/.bashrc && . ~/.bashrc && uv --version'",

    // --- make project structure ---
    "bash -lc 'mkdir -p python jupyter typescript'",

    // --- PYTHON subproject (uv init + venv + test.py) ---
    "bash -lc 'cd python && [ -f pyproject.toml ] || uv init -q'",
    "bash -lc 'cd python && uv venv .venv'",
    "bash -lc 'cd python && printf \"print(\\\"Hello from python/test.py!\\\")\\n\" > test.py'",

    // --- JUPYTER subproject (uv init + venv + jupyter/ipykernel + test notebook) ---
    "bash -lc 'cd jupyter && [ -f pyproject.toml ] || uv init -q'",
    "bash -lc 'cd jupyter && uv venv .venv'",
    "bash -lc 'cd jupyter && . .venv/bin/activate && uv add -q jupyterlab ipykernel numpy pandas matplotlib'",
    "bash -lc 'cd jupyter && . .venv/bin/activate && python -m ipykernel install --user --name jupyter-env --display-name \"Python (jupyter-env)\"'",

    // create a minimal test notebook with one cell
    "bash -lc 'cat > jupyter/test.ipynb <<\"EOF\"\\n{\\n \"cells\": [\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": null,\\n   \"metadata\": {},\\n   \"outputs\": [],\\n   \"source\": [\\n    \"print(\\\"Hello from jupyter/test.ipynb!\\\")\"\\n   ]\\n  }\\n ],\\n \"metadata\": {\\n  \"kernelspec\": {\\n   \"display_name\": \"Python (jupyter-env)\",\\n   \"language\": \"python\",\\n   \"name\": \"jupyter-env\"\\n  },\\n  \"language_info\": {\\n   \"name\": \"python\"\\n  }\\n },\\n \"nbformat\": 4,\\n \"nbformat_minor\": 5\\n}\\nEOF'",

    // --- TYPESCRIPT subproject (ts-node + test.ts) ---
    "bash -lc 'cd typescript && [ -f package.json ] || npm init -y'",
    "bash -lc 'cd typescript && npm i -D typescript ts-node @types/node'",
    "bash -lc 'cd typescript && npx -y tsc --init'",
    "bash -lc 'cd typescript && jq \".scripts.start=\\\"ts-node test.ts\\\"\" package.json > package.tmp.json && mv package.tmp.json package.json || true'",
    "bash -lc 'cd typescript && printf \"console.log(\\\"Hello from typescript/test.ts!\\\")\\n\" > test.ts'"
  ],

  "postStartCommand": [
    "bash -lc 'echo \"To run the notebook: cd jupyter && . .venv/bin/activate && jupyter lab --ip=0.0.0.0 --no-browser\"'",
    "bash -lc 'echo \"To run python test: cd python && . .venv/bin/activate && python test.py\"'",
    "bash -lc 'echo \"To run TS test: cd typescript && npm run start\"'"
  ]
}
